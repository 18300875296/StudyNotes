/**
 * 内存管理
 * js在创建变量时自动分配内存,并在不使用时自动释放,释放的过程称为垃圾回收
 * 内存生命周期
 * 1.分配你所需的内存
 * 2.使用分配到的内存(读写)
 * 3.不需要时释放
 * @format
 */

/**
 * 垃圾回收
 * 用于查找和删除那些不再被其他对象引用的对象处理过程
 *
 * 垃圾回收主要依赖引用的概念,一个对象如果有访问另一个对象的权限(隐式和显示)
 * 就叫做一个对象引用另一个对象
 *
 * @引用计数垃圾收集
 * 如果对象没有被其他对象引用到,如果引用没有指向该对象，将会被回收
 * @策略
 *  声明变量赋予引用时,计数+1
 *  同一个值被赋予另一个变量时 引用+1
 *  保存的变量被覆盖 引用-1
 *  引用为0回收内存
 * @注意
 * 无法处理循环引用的事例,两个对象相互引用,形成循环,
 * 它们被调用之后离开函数作用域,它们已经没有用可以被回收,但是引用计数会考虑它们相互有引用,所以不会被回收
 * 因为对象循环造成@内存泄漏
 *
 * @标记清除法
 * 设置一个叫root的全局对象,定期从根开始,找到所有从根开始引用的对象,
 * 回收器将找到所有可以获得对象和收集不能获得的对象
 * @策略
 * 变量进入上下文,会加上标记
 * 所有在上下文中的变量以及被引用的变量标记去掉
 * 被加上标记的变量将会被删除,因为上下文中的变量无法访问他们
 *
 *
 * @解决了循环引用问题
 * @那些无法从根对象查询到的对象都被清除
 * @format
 */
